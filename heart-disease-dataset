{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNc37/iI5WRzaG6AaOLf03P",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/VagnerML/Chatbot/blob/master/heart-disease-dataset\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "mF4U3ieDk6Qb"
      },
      "outputs": [],
      "source": [
        "from ast import increment_lineno\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "import seaborn as sns\n",
        "sns.set_style('whitegrid')"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.metrics import accuracy_score, classification_report\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.ensemble import AdaBoostClassifier, RandomForestClassifier\n",
        "from sklearn.neighbors import KNeighborsClassifier"
      ],
      "metadata": {
        "id": "7WXNy28GmIYw"
      },
      "execution_count": 118,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Heart Disease**\n",
        "\n",
        "\n",
        "*   age: The person's age in years\n",
        "*   sex: The person's sex (1 = male, 0 = female)\n",
        "*   cp: The chest pain experienced (Value 1: typical angina, Value 2: atypical angina, Value 3: non-anginal pain, Value 4: asymptomatic)\n",
        "trestbps: The person's resting blood pressure (mm Hg on admission to the hospital)\n",
        "*   chol: The person's cholesterol measurement in mg/dl\n",
        "*   fbs: The person's fasting blood sugar (> 120 mg/dl, 1= true; 0 = false)\n",
        "*   restecg: Resting electrocardiographic measurement (0 = normal, 1 having ST-T wave abnormality, 2 = showing probable or -definite left ventricular\n",
        "hypertrophy by Estes' criteria)\n",
        "*   thalach: The person's maximum heart rate achieved\n",
        "*   exang: Exercise induced angina (1 = yes; 0 no)\n",
        "*oldpeak: ST depression induced by exercise relative to rest ('ST' relates to positions on the ECG plot. See more here)\n",
        "*slope: the slope of the peak exercise ST segment (Value 1: upsloping, Value 2: flat, Value 3: downsloping)\n",
        "*ca: The number of major vessels (0-3)\n",
        "*thal: A blood disorder called thalassemia (3= normal; 6 = fixed defect; 7 = reversable defect)\n",
        "*target: Heart disease (0= NÃ£o, 1 = Sim)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "*   https://towardsdatascience.com/2-types-of-duplicate-features-in-machine-learning-2931de6c949b\n",
        "*  https://deepchecks.com/what-is-data-cleaning/\n"
      ],
      "metadata": {
        "id": "0Qu4N_agooY4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv('heart.csv')\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "o-F4BXWdqCgN",
        "outputId": "814ab0c9-730d-4cd9-d9d3-09fa3b8bfa62"
      },
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      age  sex  cp  trestbps  chol  fbs  restecg  thalach  exang  oldpeak  \\\n",
              "0      52    1   0       125   212    0        1      168      0      1.0   \n",
              "1      53    1   0       140   203    1        0      155      1      3.1   \n",
              "2      70    1   0       145   174    0        1      125      1      2.6   \n",
              "3      61    1   0       148   203    0        1      161      0      0.0   \n",
              "4      62    0   0       138   294    1        1      106      0      1.9   \n",
              "...   ...  ...  ..       ...   ...  ...      ...      ...    ...      ...   \n",
              "1020   59    1   1       140   221    0        1      164      1      0.0   \n",
              "1021   60    1   0       125   258    0        0      141      1      2.8   \n",
              "1022   47    1   0       110   275    0        0      118      1      1.0   \n",
              "1023   50    0   0       110   254    0        0      159      0      0.0   \n",
              "1024   54    1   0       120   188    0        1      113      0      1.4   \n",
              "\n",
              "      slope  ca  thal  target  \n",
              "0         2   2     3       0  \n",
              "1         0   0     3       0  \n",
              "2         0   0     3       0  \n",
              "3         2   1     3       0  \n",
              "4         1   3     2       0  \n",
              "...     ...  ..   ...     ...  \n",
              "1020      2   0     2       1  \n",
              "1021      1   1     3       0  \n",
              "1022      1   1     2       0  \n",
              "1023      2   0     2       1  \n",
              "1024      1   1     3       0  \n",
              "\n",
              "[1025 rows x 14 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c6249df4-42d0-4087-bfc4-e5d74264e722\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>sex</th>\n",
              "      <th>cp</th>\n",
              "      <th>trestbps</th>\n",
              "      <th>chol</th>\n",
              "      <th>fbs</th>\n",
              "      <th>restecg</th>\n",
              "      <th>thalach</th>\n",
              "      <th>exang</th>\n",
              "      <th>oldpeak</th>\n",
              "      <th>slope</th>\n",
              "      <th>ca</th>\n",
              "      <th>thal</th>\n",
              "      <th>target</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>52</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>125</td>\n",
              "      <td>212</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>168</td>\n",
              "      <td>0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>53</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>140</td>\n",
              "      <td>203</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>155</td>\n",
              "      <td>1</td>\n",
              "      <td>3.1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>70</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>145</td>\n",
              "      <td>174</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>125</td>\n",
              "      <td>1</td>\n",
              "      <td>2.6</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>61</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>148</td>\n",
              "      <td>203</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>161</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>62</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>138</td>\n",
              "      <td>294</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>106</td>\n",
              "      <td>0</td>\n",
              "      <td>1.9</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1020</th>\n",
              "      <td>59</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>140</td>\n",
              "      <td>221</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>164</td>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1021</th>\n",
              "      <td>60</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>125</td>\n",
              "      <td>258</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>141</td>\n",
              "      <td>1</td>\n",
              "      <td>2.8</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1022</th>\n",
              "      <td>47</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>110</td>\n",
              "      <td>275</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>118</td>\n",
              "      <td>1</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1023</th>\n",
              "      <td>50</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>110</td>\n",
              "      <td>254</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>159</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1024</th>\n",
              "      <td>54</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>120</td>\n",
              "      <td>188</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>113</td>\n",
              "      <td>0</td>\n",
              "      <td>1.4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1025 rows Ã 14 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c6249df4-42d0-4087-bfc4-e5d74264e722')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c6249df4-42d0-4087-bfc4-e5d74264e722 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c6249df4-42d0-4087-bfc4-e5d74264e722');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-217ea983-d244-43df-bd45-25c1ca8fab4e\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-217ea983-d244-43df-bd45-25c1ca8fab4e')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-217ea983-d244-43df-bd45-25c1ca8fab4e button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_6198d216-a9ba-40bf-ba19-0cfb60ae03a7\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_6198d216-a9ba-40bf-ba19-0cfb60ae03a7 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 1025,\n  \"fields\": [\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9,\n        \"min\": 29,\n        \"max\": 77,\n        \"num_unique_values\": 41,\n        \"samples\": [\n          65,\n          50,\n          54\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sex\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"trestbps\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17,\n        \"min\": 94,\n        \"max\": 200,\n        \"num_unique_values\": 49,\n        \"samples\": [\n          128,\n          172\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"chol\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 51,\n        \"min\": 126,\n        \"max\": 564,\n        \"num_unique_values\": 152,\n        \"samples\": [\n          267,\n          262\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fbs\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"restecg\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"thalach\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 23,\n        \"min\": 71,\n        \"max\": 202,\n        \"num_unique_values\": 91,\n        \"samples\": [\n          180,\n          152\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"exang\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"oldpeak\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.175053255150176,\n        \"min\": 0.0,\n        \"max\": 6.2,\n        \"num_unique_values\": 40,\n        \"samples\": [\n          2.8,\n          0.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"slope\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          2,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ca\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 4,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"thal\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"target\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 60
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "V77I_B6sqLY_",
        "outputId": "b953a43d-a2e9-4ec2-beb6-fe6e3498b273"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 1025 entries, 0 to 1024\n",
            "Data columns (total 14 columns):\n",
            " #   Column    Non-Null Count  Dtype  \n",
            "---  ------    --------------  -----  \n",
            " 0   age       1025 non-null   int64  \n",
            " 1   sex       1025 non-null   int64  \n",
            " 2   cp        1025 non-null   int64  \n",
            " 3   trestbps  1025 non-null   int64  \n",
            " 4   chol      1025 non-null   int64  \n",
            " 5   fbs       1025 non-null   int64  \n",
            " 6   restecg   1025 non-null   int64  \n",
            " 7   thalach   1025 non-null   int64  \n",
            " 8   exang     1025 non-null   int64  \n",
            " 9   oldpeak   1025 non-null   float64\n",
            " 10  slope     1025 non-null   int64  \n",
            " 11  ca        1025 non-null   int64  \n",
            " 12  thal      1025 non-null   int64  \n",
            " 13  target    1025 non-null   int64  \n",
            "dtypes: float64(1), int64(13)\n",
            "memory usage: 112.2 KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.duplicated().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ci0shafcqmC-",
        "outputId": "f3d9eee1-dfe8-4244-a3c9-bb10c3f57248"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "723"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "hd = df.drop_duplicates()\n",
        "hd"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "xc4HMbR1qtI-",
        "outputId": "617d5b2b-9bd9-4570-c2d5-62af3790f520"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     age  sex  cp  trestbps  chol  fbs  restecg  thalach  exang  oldpeak  \\\n",
              "0     52    1   0       125   212    0        1      168      0      1.0   \n",
              "1     53    1   0       140   203    1        0      155      1      3.1   \n",
              "2     70    1   0       145   174    0        1      125      1      2.6   \n",
              "3     61    1   0       148   203    0        1      161      0      0.0   \n",
              "4     62    0   0       138   294    1        1      106      0      1.9   \n",
              "..   ...  ...  ..       ...   ...  ...      ...      ...    ...      ...   \n",
              "723   68    0   2       120   211    0        0      115      0      1.5   \n",
              "733   44    0   2       108   141    0        1      175      0      0.6   \n",
              "739   52    1   0       128   255    0        1      161      1      0.0   \n",
              "843   59    1   3       160   273    0        0      125      0      0.0   \n",
              "878   54    1   0       120   188    0        1      113      0      1.4   \n",
              "\n",
              "     slope  ca  thal  target  \n",
              "0        2   2     3       0  \n",
              "1        0   0     3       0  \n",
              "2        0   0     3       0  \n",
              "3        2   1     3       0  \n",
              "4        1   3     2       0  \n",
              "..     ...  ..   ...     ...  \n",
              "723      1   0     2       1  \n",
              "733      1   0     2       1  \n",
              "739      2   1     3       0  \n",
              "843      2   0     2       0  \n",
              "878      1   1     3       0  \n",
              "\n",
              "[302 rows x 14 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ab99135c-fd4a-439d-bf39-b4cb67e312bc\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>sex</th>\n",
              "      <th>cp</th>\n",
              "      <th>trestbps</th>\n",
              "      <th>chol</th>\n",
              "      <th>fbs</th>\n",
              "      <th>restecg</th>\n",
              "      <th>thalach</th>\n",
              "      <th>exang</th>\n",
              "      <th>oldpeak</th>\n",
              "      <th>slope</th>\n",
              "      <th>ca</th>\n",
              "      <th>thal</th>\n",
              "      <th>target</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>52</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>125</td>\n",
              "      <td>212</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>168</td>\n",
              "      <td>0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>53</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>140</td>\n",
              "      <td>203</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>155</td>\n",
              "      <td>1</td>\n",
              "      <td>3.1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>70</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>145</td>\n",
              "      <td>174</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>125</td>\n",
              "      <td>1</td>\n",
              "      <td>2.6</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>61</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>148</td>\n",
              "      <td>203</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>161</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>62</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>138</td>\n",
              "      <td>294</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>106</td>\n",
              "      <td>0</td>\n",
              "      <td>1.9</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>723</th>\n",
              "      <td>68</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>120</td>\n",
              "      <td>211</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>115</td>\n",
              "      <td>0</td>\n",
              "      <td>1.5</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>733</th>\n",
              "      <td>44</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>108</td>\n",
              "      <td>141</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>175</td>\n",
              "      <td>0</td>\n",
              "      <td>0.6</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>739</th>\n",
              "      <td>52</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>128</td>\n",
              "      <td>255</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>161</td>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>843</th>\n",
              "      <td>59</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>160</td>\n",
              "      <td>273</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>125</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>878</th>\n",
              "      <td>54</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>120</td>\n",
              "      <td>188</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>113</td>\n",
              "      <td>0</td>\n",
              "      <td>1.4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>302 rows Ã 14 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ab99135c-fd4a-439d-bf39-b4cb67e312bc')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ab99135c-fd4a-439d-bf39-b4cb67e312bc button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ab99135c-fd4a-439d-bf39-b4cb67e312bc');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-04ef01e8-832d-446f-8135-55e2153369be\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-04ef01e8-832d-446f-8135-55e2153369be')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-04ef01e8-832d-446f-8135-55e2153369be button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_6b79db0b-1b01-4671-800a-b8cdf3194e12\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('hd')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_6b79db0b-1b01-4671-800a-b8cdf3194e12 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('hd');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "hd",
              "summary": "{\n  \"name\": \"hd\",\n  \"rows\": 302,\n  \"fields\": [\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9,\n        \"min\": 29,\n        \"max\": 77,\n        \"num_unique_values\": 41,\n        \"samples\": [\n          65,\n          50,\n          54\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sex\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"trestbps\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17,\n        \"min\": 94,\n        \"max\": 200,\n        \"num_unique_values\": 49,\n        \"samples\": [\n          128,\n          172\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"chol\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 51,\n        \"min\": 126,\n        \"max\": 564,\n        \"num_unique_values\": 152,\n        \"samples\": [\n          267,\n          262\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fbs\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"restecg\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"thalach\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 22,\n        \"min\": 71,\n        \"max\": 202,\n        \"num_unique_values\": 91,\n        \"samples\": [\n          180,\n          152\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"exang\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"oldpeak\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.1614522890634562,\n        \"min\": 0.0,\n        \"max\": 6.2,\n        \"num_unique_values\": 40,\n        \"samples\": [\n          2.8,\n          0.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"slope\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          2,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ca\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 4,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"thal\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"target\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize = (16,10))\n",
        "sns.heatmap(hd.corr(),annot = True, cmap = 'Reds');"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 836
        },
        "id": "UFPuIW0NrV5X",
        "outputId": "4c646ee8-30fd-45ee-f26c-83a42d7a61a9"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1600x1000 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "hd.head(2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 112
        },
        "id": "4MRPpgdQrdhW",
        "outputId": "22d5d11e-1f2c-43bd-dcde-9a6573847afd"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   age  sex  cp  trestbps  chol  fbs  restecg  thalach  exang  oldpeak  slope  \\\n",
              "0   52    1   0       125   212    0        1      168      0      1.0      2   \n",
              "1   53    1   0       140   203    1        0      155      1      3.1      0   \n",
              "\n",
              "   ca  thal  target  \n",
              "0   2     3       0  \n",
              "1   0     3       0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f74ba9a9-38a5-452a-a2c2-3a8e668852f5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>sex</th>\n",
              "      <th>cp</th>\n",
              "      <th>trestbps</th>\n",
              "      <th>chol</th>\n",
              "      <th>fbs</th>\n",
              "      <th>restecg</th>\n",
              "      <th>thalach</th>\n",
              "      <th>exang</th>\n",
              "      <th>oldpeak</th>\n",
              "      <th>slope</th>\n",
              "      <th>ca</th>\n",
              "      <th>thal</th>\n",
              "      <th>target</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>52</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>125</td>\n",
              "      <td>212</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>168</td>\n",
              "      <td>0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>53</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>140</td>\n",
              "      <td>203</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>155</td>\n",
              "      <td>1</td>\n",
              "      <td>3.1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f74ba9a9-38a5-452a-a2c2-3a8e668852f5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f74ba9a9-38a5-452a-a2c2-3a8e668852f5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f74ba9a9-38a5-452a-a2c2-3a8e668852f5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-daa23d0a-e767-4bf4-bbc5-9424bcd5fc9b\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-daa23d0a-e767-4bf4-bbc5-9424bcd5fc9b')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-daa23d0a-e767-4bf4-bbc5-9424bcd5fc9b button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "hd",
              "summary": "{\n  \"name\": \"hd\",\n  \"rows\": 302,\n  \"fields\": [\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9,\n        \"min\": 29,\n        \"max\": 77,\n        \"num_unique_values\": 41,\n        \"samples\": [\n          65,\n          50,\n          54\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sex\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"trestbps\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17,\n        \"min\": 94,\n        \"max\": 200,\n        \"num_unique_values\": 49,\n        \"samples\": [\n          128,\n          172\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"chol\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 51,\n        \"min\": 126,\n        \"max\": 564,\n        \"num_unique_values\": 152,\n        \"samples\": [\n          267,\n          262\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fbs\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"restecg\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"thalach\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 22,\n        \"min\": 71,\n        \"max\": 202,\n        \"num_unique_values\": 91,\n        \"samples\": [\n          180,\n          152\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"exang\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"oldpeak\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.1614522890634562,\n        \"min\": 0.0,\n        \"max\": 6.2,\n        \"num_unique_values\": 40,\n        \"samples\": [\n          2.8,\n          0.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"slope\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          2,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ca\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 4,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"thal\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"target\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for c in hd.columns:\n",
        "    print(f\"{c}: {hd[c].nunique()}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dT99MjgasrxG",
        "outputId": "cce0ab4f-2dca-492b-81eb-6dbe0e0db8a0"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "age: 41\n",
            "sex: 2\n",
            "cp: 4\n",
            "trestbps: 49\n",
            "chol: 152\n",
            "fbs: 2\n",
            "restecg: 3\n",
            "thalach: 91\n",
            "exang: 2\n",
            "oldpeak: 40\n",
            "slope: 3\n",
            "ca: 5\n",
            "thal: 4\n",
            "target: 2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "categoricas = ['sex', 'cp', 'fbs', 'restecg', 'exang', 'slope', 'ca', 'thal']\n",
        "numericas = ['age', 'trestbps', 'chol', 'thalach', 'oldpeak']"
      ],
      "metadata": {
        "id": "Tg156kD-vWqA"
      },
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for c in hd.columns:\n",
        "  plt.figure(figsize = (8,4))\n",
        "  plt.title(f\"Coluna avaliada: {c}\", fontsize = 16)\n",
        "  if c in categoricas:\n",
        "    sns.countplot(x = hd[c], hue = hd['target'])\n",
        "  if c in numericas:\n",
        "    sns.histplot(hd[c], kde = True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "fpUe4VAouLf5",
        "outputId": "34efb693-538c-473e-a25b-60e9b0d18527"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x400 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAArcAAAGLCAYAAADdzbo8AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAA4wklEQVR4nO3deVhV5f7//9dmA4KiqAhOlKkJTqBopRLmcUzz4ynl5Dk55tigx6kcj2nmeEwzLNO+aqZkluWQlulJbcDiOOKslIIpWblBExUE3KzfH/3cpx2ogMDG5fNxXV5X3Pda634v2NfqxeJe97IYhmEIAAAAMAE3VxcAAAAAFBbCLQAAAEyDcAsAAADTINwCAADANAi3AAAAMA3CLQAAAEyDcAsAAADTINwCAADANAi3AAAAMA3CLYCb+vbbbzV+/Hg9+uijatKkiRo2bKiIiAj169dP7777rs6fP18o4/Tu3VvBwcHauXNnoRwPeZeUlKTg4GC1adMmR1+bNm0UHByspKSkYqklODhYwcHBxTIWAHNyd3UBAEqm8+fP64UXXtB3330nSapevbqaNWum0qVLy2azKS4uTt99952ioqL07rvvqlGjRi6uGAAAwi2AXFy6dEk9evRQYmKiatWqpalTp+qBBx5w2iYzM1Pr1q3TG2+8IZvN5qJKUdTeffddZWVlqXLlyq4uBQDyhHALIIepU6cqMTFR1atX16pVq1S+fPkc23h6eurvf/+72rZtq9TU1OIvEsXi3nvvdXUJAJAvhFsATs6cOaNPP/1UkjR+/Phcg+0fVapUSZUqVcrR/tlnn2n16tU6duyY0tLS5O/vr+bNm2vw4MGqWbNmnuvp3bu3du3apRUrVqhZs2Y5+t944w29+eabGjp0qP75z3/m2t6zZ0+98cYb2r59u1JSUuTn56d27dpp+PDhKleunNPxsrKytGnTJn3zzTc6cuSIzp07p2vXrqlq1apq2bKlBg0alO+7mOfPn9enn36qmJgYnTx5UsnJyXJ3d9d9992njh07qm/fvipVqpRj+5MnT+qxxx5TuXLltGPHDqe+P+rWrZuOHDmiBQsWqF27dpKkEydOaNOmTfruu+/0008/6cKFCypTpozq1aun7t2767HHHstX7W3atNFPP/2kbdu2KTAw0NH+008/6bPPPtOOHTt0+vRpJScny8vLS3Xq1NHjjz+u7t27y80t98c64uLitGDBAu3fv192u101a9ZUjx499Le//e2GdRw8eFCbN2/Wrl279PPPP+vixYsqV66cQkND1adPH4WHh+frvG7l0qVLWrJkibZv364zZ87o2rVrKl++vAIDA9WiRQs9//zz8vDwcNrn4sWLWr58ubZt26bTp08rOztb9957rzp16qR+/frJ29vbse0777yjf//737rvvvu0Zs0a+fj4OB1r9erVeumll1SlShWtW7dOFStWLNTzA8yMB8oAOPnyyy9lt9tVrly5XB8wuhXDMDR27FiNGjVKe/bsUb169dShQwd5enpq7dq16tq1q7755psiqDx3P//8s7p27ar//Oc/Cg0NVXh4uK5cuaL33ntP/fv3V1ZWltP2KSkpGjNmjL7++mv5+vqqZcuWat68udLS0hQdHa0nnnhCP/74Y75qiImJ0fTp0xUfH6/q1aurXbt2Cg0NVWJioubOnau+ffsqMzPTsX3t2rUVFham1NRUbd26NddjxsfH68iRI6pUqZL+8pe/ONqXLVumBQsW6OLFiwoKClL79u1Vs2ZN7dy5UyNHjtTMmTPzVfuNfPLJJ5o7d65++ukn3XffferQoYPq1aunQ4cOafLkyRo+fLgMw8ix3+eff66ePXsqJiZGVatWVZs2beTl5aWJEydq1qxZNxzvtdde07Jly5SRkaEGDRqobdu2qlKlir788kv169dPy5cvz3W/6w8qvvHGG3k+t/T0dPXo0UOLFi1ScnKymjdvrg4dOqhmzZpKSkrSW2+9pfT0dKd9Tpw4occff1wLFixQSkqKmjZtqhYtWuj8+fOKiorSU089pUuXLjm279+/v9q0aaNTp05p0qRJTsc6fvy4pk2bJnd3d82bN49gC+SXAQB/MHr0aCMoKMjo06dPgfZ///33jaCgIKNZs2bG0aNHHe3Z2dnG/PnzjaCgIOOBBx4wUlJSnPbr1auXERQUZPz3v//NU/t11485f/78XNuDgoKMcePGGRkZGY6+s2fPGi1btjSCgoKMjRs3Ou136dIlY+vWrU7bG4ZhZGZmGnPnzjWCgoKMQYMG5f0bYhjGiRMnjLi4uBztv/32m9G/f38jKCjIWLx4sVPf6tWrjaCgIKN///65HnPGjBlGUFCQMWvWLKf2nTt3GqdPn86x/cmTJ41HHnnECAoKMg4cOODUd+bM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D29dn3awdu3aHNsahqF169ZJUq5r1ubmegg+efJkjr709HTt3LkzT8fJq+sP/FSvXj1HX0xMjC5cuFCg4wUEBOQItpIcD4bdSLdu3eTm5qbPP/9c6enpju9rZGTkDcfK7e6gYRjauHFjvmq/kevj3GjKx43O6cEHH5SkG9axfv36m46X23llZGToP//5z03rLSyhoaHq0aOHJOnYsWOO9kceeUTS/34xyo/p06fr2LFjatasmWbPnq1x48YpKytLI0aM4OUoQAERbgHk8NJLL6lGjRpKSkpSjx49tGfPnhzbZGZm6uOPP9YTTzzhCLeSHE94v/XWWzp+/Lij3TAMvfXWWzp27JjKlSun7t2756mWFi1aSJLef/99p3m6aWlpeumll/Tzzz8X6BxvpFatWpKk6Ohop/aEhARNnjw538e77777ZLVa9f333+cI4tu3b9e777570/2rVKmi8PBwXb58Wa+99pq+//57VatWTc2bN8+x7fWH5LZs2aJz58452u12u6Kiohx/+r5d18eJjY3ViRMnnPo+/PBDbdq0Kdf9/va3v6l06dKKi4vL8eDYzp079cEHH9x0vPXr1zvN483IyNDLL7+spKSkG9Y6ZswYdezYUe+9996tT+z/98UXX2j37t05prxkZWUpJiZGkvMvP927d1f16tW1efNmvfrqq7nOabbZbDlWCNm4caM+/PBDVapUSXPnzpWbm5t69uypRx99VElJSZowYUKeawbwP0xLAJCDr6+vVq1apREjRmjXrl3q2bOnAgMDFRwcLG9vbyUnJ+vgwYNKS0uTj4+P0xJN1+ekfvLJJ4qMjNSDDz4oPz8/HTlyRImJifLy8tKcOXPyvDB9p06dtHz5ch0+fFidO3dW06ZNlZ2drcOHD8vDw0ORkZGOB6wKw9ChQzVs2DBFRUXp888/V506dZSSkqK9e/eqadOmCggIyFdIrFixonr27KkVK1bo6aef1gMPPKCAgAAlJibqyJEjeu6557Rw4cKbHiMyMlI7duxwBMKuXbvmOpe4devWatCggY4cOaJHH31UDz30kLy9vXXw4EGdO3dOgwYN0uLFi/P3DclF/fr11bZtW23btk1PPPGEmjVrJl9fXx07dkyJiYl65plntGjRohz7Va5cWdOmTdPo0aM1ffp0ffTRRwoKCtKvv/6qPXv2qG/fvrmG/W7dumnFihU6evSo2rZtqwceeEBWq1V79uzR1atX1adPnxuusvDzzz8rMTExX3fcr78Rr0KFCqpfv74qVqyoK1eu6MCBA0pJSVHlypU1cOBAx/alS5fW22+/rWeeeUZLlizR6tWrFRwcrMqVK+vq1as6deqUTp48KT8/P8cvdQkJCZo0aZLc3Nw0Z84c+fv7O443ffp0HT16VF988YWWL1+uvn375rl2ANy5BXADfn5+io6O1uLFi/XEE0/IarUqNjZWW7Zs0cmTJxUWFqYJEyZo27ZtCg0NdexnsVg0e/ZszZ07V02aNNGRI0e0ZcsWXb16Vd26ddO6devUqlWrPNfh4eGhZcuWqVevXipTpoy+/fZbxcfHq3379lq3bt0N/zReUB06dNB7772nFi1ayGazafv27Tp//ryGDh2qxYsX51j3NC8mTJig6dOnq169ejp8+LC+/vpreXl5ad68eRoxYsQt92/Xrp1jKarr83Bz4+7urujoaD377LOqXLmyYmNjtWvXLtWrV08ffPCBWrZsme/abyQqKkpjxoxRzZo1tXfvXn377beqVq2ali5dqieffPKG+3Xu3FkrVqxQRESEzp49q23btunKlSuaMmWKxo8fn+s+5cqV08cff6wePXqoXLly+uabbxQXF6eHH35Y69atc1pPuTB069ZNgwcPVq1atXTixAlt3rxZ+/fvV5UqVTRq1Ch98sknqlKlitM+derU0YYNGzR69GjVrl1b8fHx2rJliw4cOCBvb2/1799fb775piTp6tWrGj58uNLS0vT88887/jpxXdmyZfX666/L09NTr776qg4ePFio5weYncUozMdLAQAAABfizi0AAABMg3ALAAAA0yDcAgAAwDQItwAAADANwi0AAABMg3ALAAAA0+AlDpKys7N17do1ubm5yWKxuLocAAAA/IlhGMrOzpa7u3uuL7K5jnAr6dq1azp06JCrywAAAMAthISEyNPT84b9hFvJkf5DQkJktVpdXA0AAAD+zG6369ChQze9aysRbiXJMRXBarUSbgEAAEqwW00h5YEyAAAAmAbhFgAAAKZBuAUAAIBpMOc2j+x2u7KyslxdRpHx8PBgvjEAALjjEW7z4PLly0pKSpJhGK4upchYLBYFBgbKx8fH1aUAAAAUGOH2Fux2u5KSklS6dGn5+/ub8iUPhmHIZrMpKSlJderU4Q4uAAC4YxFubyErK0uGYcjf31/e3t6uLqfI+Pv769SpU8rKyiLcAgCAOxYPlOWRGe/Y/pHZzw8AANwdCLcAAAAwDcItAAAATINwCwAAANMg3BaS3r17a/r06a4uw6Gk1QPg7mLPznZ1CShG/LxRkrBaQgmSmZkpT09PV5cBALfN6uamie/HKPHcRVeXgiJWM8BX03q0dHUZgAPhthCMGzdOu3bt0q5du7RixQpJ0hdffKFFixbpv//9r5KTk1W1alX16NFDffv2ddovNTVVISEhWrlypTw9PbV9+3bt27dPU6ZMUUJCgurUqaPnn39eQ4YM0fr161WvXj1J0vfff6/Zs2dr79698vb21sMPP6zx48erYsWKudazbds2BQYGFv83B8BdK/HcRR3/6byrywBwlyHcFoJ//etfOnXqlOrUqaNhw4ZJknx9fVWlShVFRUWpfPnyiouL06RJk+Tv76/HHnvMsW9sbKx8fHy0bNkySb+/De25557TI488orlz5+qnn37SjBkznMZLTU1V37599eSTT2r8+PHKyMjQnDlzNGLECK1YsSLXeipWrFhM3w0AAADXIdwWgrJly8rDw0NeXl7y9/d3tF8PlpJ0zz33aP/+/dq8ebNTuC1durSmTZvmmI6watUqSdK0adNUqlQp3X///Tp37pwmTpzo2Oe9995T/fr1NWrUKEfbjBkz1KpVKyUmJqpmzZq51gMAAGB2hNsitHLlSq1Zs0Znz55VRkaGsrKyVLduXadtgoKCnObZJiYmKjg4WKVKlXK0hYSEOO1z/Phx7dy5U2FhYTnGPH36tGrWrFnIZwIAAHBnINwWkc8++0z//ve/NXbsWIWFhalMmTJaunSpDhw44LRdQV7pm5aWptatW+vFF1/M0cedWgAAcDcj3BYSDw8PZf9hKZR9+/YpLCxMPXv2dLSdPn36lsepWbOmNmzY4LRywqFDh5y2adCggbZs2aLq1avL3T33H+Gf6wEAALgbsM5tIalevboOHDigpKQknT9/XjVq1NDhw4cVExOjxMREvf766zlCam66dOkiwzD00ksv6eTJk4qJidE777wjSbJYLJKkHj166OLFixo1apQOHjyo06dPKyYmRuPHj5fdbs+1HoIuAAC4GxBuC0n//v1ltVrVuXNntWjRQhEREerQoYNGjhyp7t2767ffflOPHj1ueRwfHx8t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\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x400 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAArcAAAGLCAYAAADdzbo8AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAA4LUlEQVR4nO3deViVZf7H8Q8cUFAUlcUNc/e4gYI1ClmOSpNpTgmjlZbmuGTq2GJWOqZSbj8nmzCXGjNzKc00bdGy0hYtEk3cSM0Ux0iTTUUFWQ7n94c/zq8TYJwjcODx/bqurkvuZ7m/z+mB68PN/dyPm9VqtQoAAAAwAHdXFwAAAACUFcItAAAADINwCwAAAMMg3AIAAMAwCLcAAAAwDMItAAAADINwCwAAAMMg3AIAAMAwCLcAAAAwDMItAKd88803mjx5su68806FhYWpY8eO6t69u4YPH64333xTGRkZZdLPQw89JLPZrF27dpXJ+VB6ycnJMpvN6tWrV5FtvXr1ktlsVnJycoXUYjabZTabK6QvAFWbh6sLAFC1ZGRkaOLEifr2228lSY0bN1bXrl1Vo0YNpaamKiEhQd9++61iY2P15ptvqlOnTi6uGABwIyHcAii1ixcvavDgwUpKSlKLFi30wgsv6Oabb7bbJzc3Vxs3btQrr7yi1NRUF1WK8vbmm28qLy9P9evXd3UpAGCHcAug1F544QUlJSWpcePGWrNmjerUqVNkn2rVqum+++5T7969lZmZWfFFokLcdNNNri4BAIpFuAVQKj///LM++ugjSdLkyZOLDba/5e/vL39//yLtmzdv1rp163T48GFlZWUpICBA3bp10+jRo9W8efNS1/PQQw8pPj5eK1euVNeuXYtsf+WVV7Rw4UKNHz9e//jHP4ptHzJkiF555RVt375d6enp8vPzU2RkpB577DHVrl3b7nx5eXnasmWLvv76ayUmJiolJUX5+flq2LChbrvtNo0aNcrhUcyMjAx99NFH2rFjh44fP660tDR5eHioWbNm6tOnj4YNG6bq1avb9j9+/Lj69u2r2rVra+fOnXbbfisqKkqJiYlatGiRIiMjJUk//fSTtmzZom+//Va//PKLzp07p5o1a6pdu3YaNGiQ+vbt61DtvXr10i+//KJt27YpKCjI1v7LL79o8+bN2rlzp06dOqW0tDR5eXmpdevWuueeezRo0CC5uxf/uEdCQoIWLVqkffv2yWKxqHnz5ho8eLD+9re/lVjHgQMH9Mknnyg+Pl5nzpzRhQsXVLt2bYWEhGjo0KGKiIhw6LpKw2q16rPPPtOGDRt06NAhXbhwQb6+vrrpppvUs2dPDR06VF5eXpLs77eoqCjFxsbq22+/1YULF9SoUSPdfffdGjVqlG1/ANePcAugVL744gtZLBbVrl272AeM/ojVatWzzz6rTZs2ycPDQzfffLP8/PyUmJio9957Tx9//LEWLFig22+/vRyqL+rMmTMaMGCA8vPzFRYWppycHO3du1erV6/W/v37tWbNGnl6etr2T09P19NPP61atWqpZcuWMpvNys7O1uHDh7Vq1Spt3rxZa9euVdOmTUtdw44dOzRr1izVr19fTZs2VefOnZWRkaH9+/dr/vz52r59u1auXKlq1apJklq2bKnQ0FAlJCTo888/V79+/Yqc8+jRo0pMTJS/v7/+/Oc/29qXL1+u9evXq0WLFmrTpo1q166tM2fOaNeuXYqLi9P+/fs1efJk5z/Q//P+++8rNjZWQUFBatasmcLCwmxzsffu3atvvvlGCxYskJubm91xH3/8sSZOnCiLxaI2bdqoTZs2OnPmjKZOnaqffvqpxP5eeukl7dq1S61atVKHDh3k7e2tn3/+WV988YW++OILTZkyRcOGDStyXOEvR7//5eeP5OXl6cknn9Snn34qd3d3hYSEqFu3bjp37px++uknzZ8/X3379rUL/NLVh/OioqJs935OTo527dqlhQsX6ttvv9Wbb75Z4i8rABxDuAVQKocOHZIktW/fXiaTyeHj165dq02bNqlu3bpavny52rVrJ+lq6F24cKEWLlyoiRMnauvWrapXr16Z1l6cDRs2KCoqSjExMbbweObMGd133306ePCgtm7dqrvvvtu2v4+PjxYvXqzbbrvNtr90Ney88soreu211zRr1iz95z//KXUNHTt21DvvvKPOnTvbtV+4cEFPPvmkdu7cqZUrV2rkyJG2bdHR0UpISNB7771XbLh97733JEl//etf5eHx/z/i77nnHo0ZM0ZNmjSx2//EiRO2FS769eunkJCQUtdfnO7duysyMlJt2rSxaz979qxGjx6tTz/9VJ988onuuusu27bU1FT985//lMVi0eTJk/Xwww/btsXFxemRRx4psb/hw4dr3rx5CgwMtGtPSEjQyJEj9a9//Ut9+vQps7nB8+fP16effqrGjRtr8eLFatu2rW2b1WrVd999J19f3yLHbdq0Sb1799ZLL71kG6X99ddfNWzYMO3du9d2/wO4fiwFBqBUCpf28vPzc+r4N954Q5I0btw4W7CVJDc3N40fP15ms1mZmZlat27d9RdbCg0aNNC0adPsgmrDhg314IMPSpJtNYhCPj4+6t27t93+kuTp6aknn3xSgYGB2rFjhy5dulTqGlq2bFkk2EqSr6+vpk6dKkn65JNP7Lbddddd8vb21rfffquzZ8/abcvLy9MHH3wg6erUhN/605/+VCTYSlKLFi00duzYYvtyRkhISJFgK0n169fXpEmTiu1n/fr1unz5sjp37mwXbCUpPDxc9913X4n99ejRo0iwlaTQ0FANGTJEeXl5+vzzz4tsb9iwoZo3b666deuW5rIkXR29X716tSRpwYIFdsFWunovh4eHq1atWkWO9fLyUkxMjN30gwYNGujZZ5+VJL399tvKyckpdS0ASsbILYBy9+uvv+rUqVOSpAEDBhTZ7ubmpqioKM2ZM0e7du3SmDFjyr2m8PBweXt7F2lv2bKlJBUJjoWOHDmiuLg4JScnKysrS1arVZJksVhUUFCgU6dOqX379qWuw2KxKD4+Xnv37lVqaqpycnJktVpt501KSrLb38fHR3feeac2bdqkTZs22Y1qfvXVV8rIyFBISIhat25dpK/Lly/r66+/1uHDh3Xu3Dnl5eVJkm1Vi9/35azc3Fzt3LlTBw8eVHp6uvLy8mS1WnX58uVi+4mPj5ck9e/fv9jzDRgwQCtXriyxv3Pnzumrr77Sjz/+qMzMTOXn50uSTp48WWx/kjRv3jyHr2vXrl3Ky8tThw4d1LFjR4eOvfXWWxUQEFCkvWfPnqpTp47Onz+vxMREhYWFOVwXAHuEWwClUjhVID093eFjC4NinTp15OPjU+w+hU/flxQqy1rDhg2LbS+sLzc31649KytLTz/9tD777LNrnteRkduTJ09q/PjxOnbsmEPni46O1qZNm/Tee+/ZhdsNGzZIKjpqK0nbt2/X5MmTdf78+TKpvST79u3TE088odOnT5e6n19//VWSisxTLVRSuyStW7dOc+bMUVZWVon7FIbq6/XLL79Iujra7ahrXUPjxo11/vx52+cA4PoQbgGUSocOHfT+++/rhx9+kMVicWrebUUqKCi45vaSntgvyUsvvaTPPvtMLVq00MSJExUcHKy6devapincf//9SkhIsI24lsaECRN07Ngx9ezZUyNHjlTLli3l4+MjT09P5ebmKjg4uNjjbrnlFt100006efKk9u7dq7CwMKWnp+vrr79W9erVi8zFPXv2rJ544glduXJFI0eOVP/+/RUUFKQaNWrI3d1dO3fu1IgRIxz6PIqTnZ2tcePGKS0tTVFRUXrggQfUtGlT+fj4yGQyKSkpSX369LnufgodOnRI06ZNk8lk0lNPPaVevXqpYcOG8vb2lpubm9555x1NmzbNof8nAKo+5twCKJWePXvK3d1dmZmZ2r59u0PHFj7Mc/78+RJHB3/++We7ff9I4UoGJY3KXWvk0Bkff/yxJOnf//63IiMjVb9+fbv5t4V/Ai+t48eP6+jRo/Lz89PChQt18803q27durbr+u9//1visW5ubrbpHYUPkH3wwQfKz8/XHXfcUWQZs+3bt+vKlSu64447NGnSJLVt21Y+Pj62gH+tvhyxe/dupaWlqUOHDpozZ45CQkLk6+tr+0WopH4K/58Xjoz+Xkntn3zyiaxWqx588EGNGjVKLVu2VI0aNWwrMTj6/+SPNGrUSNLVh/Acda3XFBdeHy/EAMoG4RZAqdx00022EcG5c+de88/b0tXpC4UhoEGDBrZpB4Vh7LesVqs2btwoScWuWVucwiBw/PjxItuys7O1a9euUp2ntC5cuCDp6p+Qf2/Hjh06d+6cU+cLDAy0W9WgUOGDYSWJioqSu7u7Pv74Y2VnZ9s+1+jo6BL7Kgxnv2W1WvXhhx86VHtJCvspacpHSdd0yy23SFKJdWzatOma/RV3XTk5Ofr000+vWa+junXrJk9PTyUmJioxMdGhY7/55ptip/R89dVXOn/+vGrWrOnwPF4AxSPcAii15557Tk2bNlVycrIGDx6sPXv2FNknNzdX69ev17333ms3wvX3v/9dkrR48WIdOXLE1m61WrV48WIdPnxYtWvX1qBBg0pVS3h4uKSrT5n/dp5uVlaWnnvuOZ05c8apayxJ4TzLVatW2bWfOHFC06dPd/h8zZo1k8lk0o8//lgkiG/fvl1vvvnmNY9v0KCBIiIidOnSJb300kv68ccf1ahRI3Xr1q3IvoUPyW3dulUpKSm2dovFotjYWCUkJDhcf3EK+4mLiyuyNu0777yjLVu2FHvc3/72N9WoUUMJCQlFHhzbtWuX1q5de83+Nm3aZPcXgZycHM2YMeOao6VPP/20+vTpY1v9oDT8/Pz0wAMPSJIee+wx/fjjj3bbrVar4uLidPHixSLHXrlyRTNmzNCVK1dsbWfPntXcuXMlXZ3Wwjq3QNlgzi2AUvP19dWaNWv0+OOPKz4+XkOGDFFQUJDMZrO8vb2VlpamAwcOKCsrSz4+PnZLNBXOSX3//fcVHR2tW265xfYSh6SkJHl5eenFF18s9Rq3d911l1asWKFDhw6pX79+6tKliwoKCnTo0CF5enoqOjra9oBVWRg/frwmTJig2NhYffzxx2rdurXS09P1/fffq0uXLgoMDHQoJNarV09DhgzRypUr9fDDD+vmm29WYGCgkpKSlJiYqEcffVRLliy55jmio6Nta+FKV1cVKG4ucc+ePdWhQwclJibqzjvv1J/+9Cd5e3vrwIEDSklJ0ahRo7R06VLHPpBitG/fXr1799a2bdt07733qmvXrvL19dXhw4eVlJSkRx55RK+++mqR4+rXr6+ZM2dq0qRJmjVrlt599121adNGZ8+e1Z49ezRs2LBiw35UVJRWrlypH374Qb1799bNN98sk8mkPXv26MqVKxo6dGiJqyycOXNGSUlJDo+4T5o0ScnJydq+fbvuuecederUyfZA2LFjx3T27Flt27atyHJg9957r7788ktFRkaqS5cutpc4ZGVlKTQ0VBMmTHCoDgAlY+QWgEP8/Py0atUqLV26VPfee69MJpPi4uK0detWHT9+XKGhoZoyZYq2bdtm90IANzc3zZs3T/Pnz1dYWJgSExO1detWXblyRVFRUdq4caN69OhR6jo8PT21fPlyPfjgg6pZs6a++eYbHT16VHfccYc2btxY4p/GnfWXv/xFq1evVnh4uFJTU7V9+3ZlZGRo/PjxWrp0qd3bzEprypQpmjVrltq1a6dDhw7pq6++kpeXl/7973/r8ccf/8PjIyMjba9B/u083N/z8PDQqlWrNGbMGNWvX19xcXGKj49Xu3bttHbtWt12220O116S2NhYPf3002revLm+//57ffPNN2rUqJGWLVumgQMHlnhcv379tHLlSnXv3l2nT5/Wtm3bdPnyZcXExJT45rTatWtr/fr1Gjx4sGrXrq2v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TZgwQbt371b9+vU1ePBgDRo0SJKUnJys1NRURURE2I6pVauWOnXqpISEBIfD7W+nO5SWt7e32rdv7/BxRnH06FFlZ2e7ugwAuG78POfnOYzBoXB75MgR279/+uknpaam2r4uKCjQjh07VL9+/TIr7ueff9aaNWs0fPhwjRkzRgcPHtTMmTPl6empAQMG2Pr38/OzO87Pz09paWkO9xccHHxD/9buDLPZ7OoSAABlgJ/nqOwsFkupBiIdCrf33nuv3Nzc5ObmpmHDhhXZ7uXlpalTpzpyymuyWq3q2LGjnnzySUlS+/btdezYMa1du1YDBgwos34KmUwmwq2D+LwAwBj4eQ6jcCjcbtu2TVarVZGRkXr33XdVr1492zZPT0/5+fmV6TdHQECAWrZsadfWokULbd261bZdktLT0xUYGGjbJz09XW3bti2zOgAAAFA1OBRuGzduLMl+ekJ5CgsLU1JSkl3byZMnbXUEBQUpICBAcXFxateunaSrD7Xt379fDzzwQIXUCAAAgMrDqQfKpKshc9euXUpPT1dBQYHdtvHjx193YZI0bNgwPfDAA3r11Vd111136cCBA1q3bp2ef/55SZKbm5uGDh2qJUuWqGnTpgoKClJsbKwCAwNtqycAAADgxuFUuF23bp1mzJihunXryt/fX25ubrZtbm5uZRZuQ0JCtHDhQr300ktatGiRgoKCNGXKFP31r3+17TNq1ChlZ2dr2rRpyszMVJcuXfT666+revXqZVIDAAAAqg6nwu2SJUv0+OOPa/To0WVdTxE9e/ZUz549S9zu5uamxx57TI899li51wIAAIDKzak3lF24cEF33XVXWdcCAAAAXBenwm2fPn20c+fOsq4FAAAAuC5OTUto2rSpYmNjtX//frVp00YeHvanGTp0aJkUBwAAADjCqXD7zjvvqEaNGoqPj1d8fLzdtsIVDAAAAICK5lS43b59e1nXAQAAAFw3p+bcAgAAAJWRUyO3kydPvub2OXPmOFUMAAAAcD2cCreZmZl2X+fn5+vYsWPKzMxUt27dyqQwAAAAwFFOhdtFixYVaSsoKNCMGTPUpEmT6y4KAAAAcEaZzbl1d3fXww8/rBUrVpTVKQEAAACHlOkDZT///LPy8/PL8pQAAABAqTk1LeH3D4xZrValpqbqyy+/1IABA8qkMAAAAMBRToXbH374we5r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\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Removendo Outliers"
      ],
      "metadata": {
        "id": "C9HekUH8u-lR"
      },
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize = (16,6))\n",
        "sns.boxplot(data = hd);"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 501
        },
        "id": "BbUnOBEfwCK_",
        "outputId": "fba6fb28-9ebf-4cd9-ba3e-d41ac84beddf"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1600x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "hd.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 320
        },
        "id": "Nw2fvumuwXPO",
        "outputId": "a049cc20-2691-4a07-f5b2-46f30a3e124f"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             age         sex          cp    trestbps        chol         fbs  \\\n",
              "count  302.00000  302.000000  302.000000  302.000000  302.000000  302.000000   \n",
              "mean    54.42053    0.682119    0.963576  131.602649  246.500000    0.149007   \n",
              "std      9.04797    0.466426    1.032044   17.563394   51.753489    0.356686   \n",
              "min     29.00000    0.000000    0.000000   94.000000  126.000000    0.000000   \n",
              "25%     48.00000    0.000000    0.000000  120.000000  211.000000    0.000000   \n",
              "50%     55.50000    1.000000    1.000000  130.000000  240.500000    0.000000   \n",
              "75%     61.00000    1.000000    2.000000  140.000000  274.750000    0.000000   \n",
              "max     77.00000    1.000000    3.000000  200.000000  564.000000    1.000000   \n",
              "\n",
              "          restecg     thalach       exang     oldpeak       slope          ca  \\\n",
              "count  302.000000  302.000000  302.000000  302.000000  302.000000  302.000000   \n",
              "mean     0.526490  149.569536    0.327815    1.043046    1.397351    0.718543   \n",
              "std      0.526027   22.903527    0.470196    1.161452    0.616274    1.006748   \n",
              "min      0.000000   71.000000    0.000000    0.000000    0.000000    0.000000   \n",
              "25%      0.000000  133.250000    0.000000    0.000000    1.000000    0.000000   \n",
              "50%      1.000000  152.500000    0.000000    0.800000    1.000000    0.000000   \n",
              "75%      1.000000  166.000000    1.000000    1.600000    2.000000    1.000000   \n",
              "max      2.000000  202.000000    1.000000    6.200000    2.000000    4.000000   \n",
              "\n",
              "             thal      target  \n",
              "count  302.000000  302.000000  \n",
              "mean     2.314570    0.543046  \n",
              "std      0.613026    0.498970  \n",
              "min      0.000000    0.000000  \n",
              "25%      2.000000    0.000000  \n",
              "50%      2.000000    1.000000  \n",
              "75%      3.000000    1.000000  \n",
              "max      3.000000    1.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-85cf6fce-f2e4-4ff3-90c6-b5336b8fd7ae\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>sex</th>\n",
              "      <th>cp</th>\n",
              "      <th>trestbps</th>\n",
              "      <th>chol</th>\n",
              "      <th>fbs</th>\n",
              "      <th>restecg</th>\n",
              "      <th>thalach</th>\n",
              "      <th>exang</th>\n",
              "      <th>oldpeak</th>\n",
              "      <th>slope</th>\n",
              "      <th>ca</th>\n",
              "      <th>thal</th>\n",
              "      <th>target</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>302.00000</td>\n",
              "      <td>302.000000</td>\n",
              "      <td>302.000000</td>\n",
              "      <td>302.000000</td>\n",
              "      <td>302.000000</td>\n",
              "      <td>302.000000</td>\n",
              "      <td>302.000000</td>\n",
              "      <td>302.000000</td>\n",
              "      <td>302.000000</td>\n",
              "      <td>302.000000</td>\n",
              "      <td>302.000000</td>\n",
              "      <td>302.000000</td>\n",
              "      <td>302.000000</td>\n",
              "      <td>302.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>54.42053</td>\n",
              "      <td>0.682119</td>\n",
              "      <td>0.963576</td>\n",
              "      <td>131.602649</td>\n",
              "      <td>246.500000</td>\n",
              "      <td>0.149007</td>\n",
              "      <td>0.526490</td>\n",
              "      <td>149.569536</td>\n",
              "      <td>0.327815</td>\n",
              "      <td>1.043046</td>\n",
              "      <td>1.397351</td>\n",
              "      <td>0.718543</td>\n",
              "      <td>2.314570</td>\n",
              "      <td>0.543046</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>9.04797</td>\n",
              "      <td>0.466426</td>\n",
              "      <td>1.032044</td>\n",
              "      <td>17.563394</td>\n",
              "      <td>51.753489</td>\n",
              "      <td>0.356686</td>\n",
              "      <td>0.526027</td>\n",
              "      <td>22.903527</td>\n",
              "      <td>0.470196</td>\n",
              "      <td>1.161452</td>\n",
              "      <td>0.616274</td>\n",
              "      <td>1.006748</td>\n",
              "      <td>0.613026</td>\n",
              "      <td>0.498970</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>29.00000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>94.000000</td>\n",
              "      <td>126.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>71.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>48.00000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>120.000000</td>\n",
              "      <td>211.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>133.250000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>55.50000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>130.000000</td>\n",
              "      <td>240.500000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>152.500000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.800000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>61.00000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>140.000000</td>\n",
              "      <td>274.750000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>166.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.600000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>77.00000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>200.000000</td>\n",
              "      <td>564.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>202.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>6.200000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-85cf6fce-f2e4-4ff3-90c6-b5336b8fd7ae')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-85cf6fce-f2e4-4ff3-90c6-b5336b8fd7ae button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-85cf6fce-f2e4-4ff3-90c6-b5336b8fd7ae');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-2d3dee51-47e3-4c3c-896e-433e5829d5dc\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2d3dee51-47e3-4c3c-896e-433e5829d5dc')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-2d3dee51-47e3-4c3c-896e-433e5829d5dc button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"hd\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 92.24634585738892,\n        \"min\": 9.047969746247457,\n        \"max\": 302.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          54.420529801324506,\n          55.5,\n          302.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sex\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 106.56441136917542,\n        \"min\": 0.0,\n        \"max\": 302.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.6821192052980133,\n          1.0,\n          0.46642573806726434\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 106.373891168386,\n        \"min\": 0.0,\n        \"max\": 302.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          302.0,\n          0.9635761589403974,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"trestbps\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 82.36893210059166,\n        \"min\": 17.56339423003756,\n        \"max\": 302.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          131.60264900662253,\n          130.0,\n          302.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"chol\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 150.32331637314442,\n        \"min\": 51.75348865574056,\n        \"max\": 564.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          246.5,\n          240.5,\n          302.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fbs\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 106.69762766400386,\n        \"min\": 0.0,\n        \"max\": 302.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.1490066225165563,\n          1.0,\n          0.3566860293648133\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"restecg\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 106.51988268714389,\n        \"min\": 0.0,\n        \"max\": 302.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          302.0,\n          0.5264900662251656,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"thalach\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 83.448389293815,\n        \"min\": 22.903527251969845,\n        \"max\": 302.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          149.56953642384107,\n          152.5,\n          302.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"exang\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 106.63261370805945,\n        \"min\": 0.0,\n        \"max\": 302.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.32781456953642385,\n          1.0,\n          0.47019596400976954\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"oldpeak\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 106.2458369741905,\n        \"min\": 0.0,\n        \"max\": 302.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          302.0,\n          1.0430463576158941,\n          1.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"slope\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 106.37049565715138,\n        \"min\": 0.0,\n        \"max\": 302.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          302.0,\n          1.3973509933774835,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ca\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 106.44154442680605,\n        \"min\": 0.0,\n        \"max\": 302.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          302.0,\n          0.7185430463576159,\n          4.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"thal\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 106.12547106736513,\n        \"min\": 0.0,\n        \"max\": 302.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          302.0,\n          2.314569536423841,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"target\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 106.56978221617638,\n        \"min\": 0.0,\n        \"max\": 302.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.543046357615894,\n          1.0,\n          0.49897035961141234\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "hd['trestbps'].quantile(0.99)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yQ_9WbErwvkP",
        "outputId": "7fa107fa-2f75-4746-8273-662670abaa1b"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "180.0"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "hd1 = hd[hd[\"trestbps\"] < hd['trestbps'].quantile(0.99)]"
      ],
      "metadata": {
        "id": "wIIKMVYiw7KX"
      },
      "execution_count": 32,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize = (16,6))\n",
        "sns.boxplot(data = hd1);"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 501
        },
        "id": "5CvzsBBFxMBA",
        "outputId": "a84c04c2-0fe3-452d-b5c8-cc8162f58f09"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1600x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "hd1.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 320
        },
        "id": "Vc6Bd3RYxbu_",
        "outputId": "d7cc620f-8a6b-4307-b4d7-f38982dd1afe"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              age         sex          cp    trestbps        chol         fbs  \\\n",
              "count  297.000000  297.000000  297.000000  297.000000  297.000000  297.000000   \n",
              "mean    54.336700    0.686869    0.969697  130.680135  245.609428    0.144781   \n",
              "std      9.071847    0.464550    1.034420   16.154304   51.645776    0.352474   \n",
              "min     29.000000    0.000000    0.000000   94.000000  126.000000    0.000000   \n",
              "25%     47.000000    0.000000    0.000000  120.000000  211.000000    0.000000   \n",
              "50%     55.000000    1.000000    1.000000  130.000000  240.000000    0.000000   \n",
              "75%     61.000000    1.000000    2.000000  140.000000  273.000000    0.000000   \n",
              "max     77.000000    1.000000    3.000000  178.000000  564.000000    1.000000   \n",
              "\n",
              "          restecg     thalach       exang     oldpeak       slope          ca  \\\n",
              "count  297.000000  297.000000  297.000000  297.000000  297.000000  297.000000   \n",
              "mean     0.525253  149.565657    0.319865    1.030303    1.400673    0.720539   \n",
              "std      0.520072   22.844729    0.467211    1.146686    0.613254    1.009758   \n",
              "min      0.000000   71.000000    0.000000    0.000000    0.000000    0.000000   \n",
              "25%      0.000000  134.000000    0.000000    0.000000    1.000000    0.000000   \n",
              "50%      1.000000  153.000000    0.000000    0.800000    1.000000    0.000000   \n",
              "75%      1.000000  166.000000    1.000000    1.600000    2.000000    1.000000   \n",
              "max      2.000000  202.000000    1.000000    6.200000    2.000000    4.000000   \n",
              "\n",
              "             thal      target  \n",
              "count  297.000000  297.000000  \n",
              "mean     2.309764    0.548822  \n",
              "std      0.613755    0.498451  \n",
              "min      0.000000    0.000000  \n",
              "25%      2.000000    0.000000  \n",
              "50%      2.000000    1.000000  \n",
              "75%      3.000000    1.000000  \n",
              "max      3.000000    1.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-50df1dbf-495f-4bec-b5fc-9978e74b8976\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>sex</th>\n",
              "      <th>cp</th>\n",
              "      <th>trestbps</th>\n",
              "      <th>chol</th>\n",
              "      <th>fbs</th>\n",
              "      <th>restecg</th>\n",
              "      <th>thalach</th>\n",
              "      <th>exang</th>\n",
              "      <th>oldpeak</th>\n",
              "      <th>slope</th>\n",
              "      <th>ca</th>\n",
              "      <th>thal</th>\n",
              "      <th>target</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>297.000000</td>\n",
              "      <td>297.000000</td>\n",
              "      <td>297.000000</td>\n",
              "      <td>297.000000</td>\n",
              "      <td>297.000000</td>\n",
              "      <td>297.000000</td>\n",
              "      <td>297.000000</td>\n",
              "      <td>297.000000</td>\n",
              "      <td>297.000000</td>\n",
              "      <td>297.000000</td>\n",
              "      <td>297.000000</td>\n",
              "      <td>297.000000</td>\n",
              "      <td>297.000000</td>\n",
              "      <td>297.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>54.336700</td>\n",
              "      <td>0.686869</td>\n",
              "      <td>0.969697</td>\n",
              "      <td>130.680135</td>\n",
              "      <td>245.609428</td>\n",
              "      <td>0.144781</td>\n",
              "      <td>0.525253</td>\n",
              "      <td>149.565657</td>\n",
              "      <td>0.319865</td>\n",
              "      <td>1.030303</td>\n",
              "      <td>1.400673</td>\n",
              "      <td>0.720539</td>\n",
              "      <td>2.309764</td>\n",
              "      <td>0.548822</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>9.071847</td>\n",
              "      <td>0.464550</td>\n",
              "      <td>1.034420</td>\n",
              "      <td>16.154304</td>\n",
              "      <td>51.645776</td>\n",
              "      <td>0.352474</td>\n",
              "      <td>0.520072</td>\n",
              "      <td>22.844729</td>\n",
              "      <td>0.467211</td>\n",
              "      <td>1.146686</td>\n",
              "      <td>0.613254</td>\n",
              "      <td>1.009758</td>\n",
              "      <td>0.613755</td>\n",
              "      <td>0.498451</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>29.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>94.000000</td>\n",
              "      <td>126.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>71.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>47.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>120.000000</td>\n",
              "      <td>211.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>134.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>55.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>130.000000</td>\n",
              "      <td>240.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>153.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.800000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>61.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>140.000000</td>\n",
              "      <td>273.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>166.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.600000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>77.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>178.000000</td>\n",
              "      <td>564.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>202.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>6.200000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-50df1dbf-495f-4bec-b5fc-9978e74b8976')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-50df1dbf-495f-4bec-b5fc-9978e74b8976 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-50df1dbf-495f-4bec-b5fc-9978e74b8976');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-37dbdccc-f841-4abe-8296-3ae1d6f30d0d\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-37dbdccc-f841-4abe-8296-3ae1d6f30d0d')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-37dbdccc-f841-4abe-8296-3ae1d6f30d0d button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"hd1\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 90.59279808002896,\n        \"min\": 9.071847223604024,\n        \"max\": 297.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          54.33670033670034,\n          55.0,\n          297.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sex\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 104.79651403150729,\n        \"min\": 0.0,\n        \"max\": 297.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.6868686868686869,\n          1.0,\n          0.46455001432215653\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 104.60577109308828,\n        \"min\": 0.0,\n        \"max\": 297.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          297.0,\n          0.9696969696969697,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"trestbps\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 79.38021836787294,\n        \"min\": 16.15430375198912,\n        \"max\": 297.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          130.68013468013467,\n          130.0,\n          297.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"chol\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 150.08861999092528,\n        \"min\": 51.64577550038461,\n        \"max\": 564.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          245.6094276094276,\n          240.0,\n          297.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fbs\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 104.93029576699878,\n        \"min\": 0.0,\n        \"max\": 297.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.1447811447811448,\n          1.0,\n          0.352473934125453\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"restecg\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 104.75251384434539,\n        \"min\": 0.0,\n        \"max\": 297.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          297.0,\n          0.5252525252525253,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"thalach\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 82.15057469985703,\n        \"min\": 22.844729247282718,\n        \"max\": 297.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          149.56565656565655,\n          153.0,\n          297.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"exang\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 104.86541318769778,\n        \"min\": 0.0,\n        \"max\": 297.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.31986531986531985,\n          1.0,\n          0.4672113743119577\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"oldpeak\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 104.47978753247263,\n        \"min\": 0.0,\n        \"max\": 297.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          297.0,\n          1.0303030303030303,\n          1.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"slope\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 104.60275260531253,\n        \"min\": 0.0,\n        \"max\": 297.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          297.0,\n          1.4006734006734007,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ca\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 104.67366101337755,\n        \"min\": 0.0,\n        \"max\": 297.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          297.0,\n          0.7205387205387206,\n          4.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"thal\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 104.35799527778224,\n        \"min\": 0.0,\n        \"max\": 297.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          297.0,\n          2.3097643097643097,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"target\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 104.80176330967855,\n        \"min\": 0.0,\n        \"max\": 297.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.5488215488215489,\n          1.0,\n          0.4984505978058392\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "hd1['chol'].quantile(0.98)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "twY1m0d2xqGW",
        "outputId": "649c1eb9-76d3-4641-e358-cc86b6783834"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "354.4799999999999"
            ]
          },
          "metadata": {},
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "hd2 = hd1[hd1[\"chol\"] < hd1['chol'].quantile(0.98)]"
      ],
      "metadata": {
        "id": "g2DjUddQyfZA"
      },
      "execution_count": 59,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize = (16,6))\n",
        "sns.boxplot(data = hd2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 518
        },
        "id": "3NeYJNlUy-ZQ",
        "outputId": "928a45be-1b93-407b-eb40-f24cac609f71"
      },
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 66
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1600x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "hd2.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 320
        },
        "id": "LO3EkZBuzCo9",
        "outputId": "e95160cb-c74a-4d29-b2cc-6dd8ed95ebe5"
      },
      "execution_count": 64,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              age         sex          cp    trestbps        chol         fbs  \\\n",
              "count  291.000000  291.000000  291.000000  291.000000  291.000000  291.000000   \n",
              "mean    54.158076    0.701031    0.969072  130.491409  241.907216    0.144330   \n",
              "std      9.064278    0.458595    1.035111   16.142761   44.214699    0.352029   \n",
              "min     29.000000    0.000000    0.000000   94.000000  126.000000    0.000000   \n",
              "25%     47.000000    0.000000    0.000000  120.000000  210.500000    0.000000   \n",
              "50%     55.000000    1.000000    1.000000  130.000000  239.000000    0.000000   \n",
              "75%     60.000000    1.000000    2.000000  140.000000  270.000000    0.000000   \n",
              "max     77.000000    1.000000    3.000000  178.000000  354.000000    1.000000   \n",
              "\n",
              "          restecg     thalach       exang     oldpeak       slope          ca  \\\n",
              "count  291.000000  291.000000  291.000000  291.000000  291.000000  291.000000   \n",
              "mean     0.536082  149.457045    0.323024    1.016151    1.402062    0.714777   \n",
              "std      0.519851   23.061553    0.468437    1.143368    0.615766    1.005719   \n",
              "min      0.000000   71.000000    0.000000    0.000000    0.000000    0.000000   \n",
              "25%      0.000000  132.500000    0.000000    0.000000    1.000000    0.000000   \n",
              "50%      1.000000  152.000000    0.000000    0.600000    1.000000    0.000000   \n",
              "75%      1.000000  166.500000    1.000000    1.600000    2.000000    1.000000   \n",
              "max      2.000000  202.000000    1.000000    6.200000    2.000000    4.000000   \n",
              "\n",
              "             thal      target  \n",
              "count  291.000000  291.000000  \n",
              "mean     2.305842    0.546392  \n",
              "std      0.615266    0.498701  \n",
              "min      0.000000    0.000000  \n",
              "25%      2.000000    0.000000  \n",
              "50%      2.000000    1.000000  \n",
              "75%      3.000000    1.000000  \n",
              "max      3.000000    1.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c604ed13-db25-4246-8d17-07e1e512aa71\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>sex</th>\n",
              "      <th>cp</th>\n",
              "      <th>trestbps</th>\n",
              "      <th>chol</th>\n",
              "      <th>fbs</th>\n",
              "      <th>restecg</th>\n",
              "      <th>thalach</th>\n",
              "      <th>exang</th>\n",
              "      <th>oldpeak</th>\n",
              "      <th>slope</th>\n",
              "      <th>ca</th>\n",
              "      <th>thal</th>\n",
              "      <th>target</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>291.000000</td>\n",
              "      <td>291.000000</td>\n",
              "      <td>291.000000</td>\n",
              "      <td>291.000000</td>\n",
              "      <td>291.000000</td>\n",
              "      <td>291.000000</td>\n",
              "      <td>291.000000</td>\n",
              "      <td>291.000000</td>\n",
              "      <td>291.000000</td>\n",
              "      <td>291.000000</td>\n",
              "      <td>291.000000</td>\n",
              "      <td>291.000000</td>\n",
              "      <td>291.000000</td>\n",
              "      <td>291.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>54.158076</td>\n",
              "      <td>0.701031</td>\n",
              "      <td>0.969072</td>\n",
              "      <td>130.491409</td>\n",
              "      <td>241.907216</td>\n",
              "      <td>0.144330</td>\n",
              "      <td>0.536082</td>\n",
              "      <td>149.457045</td>\n",
              "      <td>0.323024</td>\n",
              "      <td>1.016151</td>\n",
              "      <td>1.402062</td>\n",
              "      <td>0.714777</td>\n",
              "      <td>2.305842</td>\n",
              "      <td>0.546392</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>9.064278</td>\n",
              "      <td>0.458595</td>\n",
              "      <td>1.035111</td>\n",
              "      <td>16.142761</td>\n",
              "      <td>44.214699</td>\n",
              "      <td>0.352029</td>\n",
              "      <td>0.519851</td>\n",
              "      <td>23.061553</td>\n",
              "      <td>0.468437</td>\n",
              "      <td>1.143368</td>\n",
              "      <td>0.615766</td>\n",
              "      <td>1.005719</td>\n",
              "      <td>0.615266</td>\n",
              "      <td>0.498701</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>29.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>94.000000</td>\n",
              "      <td>126.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>71.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>47.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>120.000000</td>\n",
              "      <td>210.500000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>132.500000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>55.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>130.000000</td>\n",
              "      <td>239.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>152.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.600000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>60.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>140.000000</td>\n",
              "      <td>270.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>166.500000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.600000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>77.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>178.000000</td>\n",
              "      <td>354.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>202.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>6.200000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c604ed13-db25-4246-8d17-07e1e512aa71')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c604ed13-db25-4246-8d17-07e1e512aa71 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c604ed13-db25-4246-8d17-07e1e512aa71');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-be51d34b-f71e-4b66-827c-b9038da698aa\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-be51d34b-f71e-4b66-827c-b9038da698aa')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-be51d34b-f71e-4b66-827c-b9038da698aa button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"hd2\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 88.56408183970646,\n        \"min\": 9.064277844133201,\n        \"max\": 291.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          54.15807560137457,\n          55.0,\n          291.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sex\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 102.67479949829455,\n        \"min\": 0.0,\n        \"max\": 291.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.7010309278350515,\n          1.0,\n          0.4585948956873762\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 102.48454440312625,\n        \"min\": 0.0,\n        \"max\": 291.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          291.0,\n          0.9690721649484536,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"trestbps\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 77.68083343319192,\n        \"min\": 16.142760576882154,\n        \"max\": 291.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          130.4914089347079,\n          130.0,\n          291.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"chol\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 97.19649615469591,\n        \"min\": 44.214699336281775,\n        \"max\": 354.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          241.90721649484536,\n          239.0,\n          291.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fbs\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 102.80903221648977,\n        \"min\": 0.0,\n        \"max\": 291.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.14432989690721648,\n          1.0,\n          0.35202931074036176\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"restecg\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 102.63069587141067,\n        \"min\": 0.0,\n        \"max\": 291.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          291.0,\n          0.5360824742268041,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"thalach\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 80.62496157471746,\n        \"min\": 23.061552797737296,\n        \"max\": 291.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          149.4570446735395,\n          152.0,\n          291.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"exang\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 102.7438881924779,\n        \"min\": 0.0,\n        \"max\": 291.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.3230240549828179,\n          1.0,\n          0.46843738341210894\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"oldpeak\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 102.37007927428088,\n        \"min\": 0.0,\n        \"max\": 291.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          291.0,\n          1.016151202749141,\n          1.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"slope\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 102.48127860424066,\n        \"min\": 0.0,\n        \"max\": 291.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          291.0,\n          1.402061855670103,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ca\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 102.55300768169141,\n        \"min\": 0.0,\n        \"max\": 291.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          291.0,\n          0.7147766323024055,\n          4.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"thal\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 102.23690310574557,\n        \"min\": 0.0,\n        \"max\": 291.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          291.0,\n          2.3058419243986252,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"target\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 102.68057016027244,\n        \"min\": 0.0,\n        \"max\": 291.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.5463917525773195,\n          1.0,\n          0.4987007648853797\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 64
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "hd2['thalach'].quantile(0.005)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "V4xsxyxv1OQg",
        "outputId": "1bfcb1a7-c5b3-4d9d-b7ba-28ea29a50955"
      },
      "execution_count": 65,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "88.9"
            ]
          },
          "metadata": {},
          "execution_count": 65
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "hd3 = hd2[hd2['thalach'] > hd2['thalach'].quantile(0.005)]"
      ],
      "metadata": {
        "id": "v5ijHEbd1mGI"
      },
      "execution_count": 41,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize = (16,6))\n",
        "sns.boxplot(data = hd3);"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 501
        },
        "id": "xhtu2uKR1-6Q",
        "outputId": "2600d5fd-ea3a-43c7-8208-19a5df0a3b5f"
      },
      "execution_count": 62,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1600x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "categoricas = ['sex', 'cp', 'fbs', 'restecg', 'exang', 'slope', 'ca', 'thal']\n",
        "numericas = ['age', 'trestbps', 'chol', 'thalach', 'oldpeak']"
      ],
      "metadata": {
        "id": "8vapsOEp2EZ6"
      },
      "execution_count": 43,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "hd4 = pd.get_dummies(hd3, columns = ['sex', 'cp', 'fbs', 'restecg', 'exang', 'slope', 'ca', 'thal'], drop_first= True)\n",
        "hd4\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 444
        },
        "id": "RqUVkC6S2VUY",
        "outputId": "bcbd1d70-13e3-41d0-a008-b3d3d8a3145a"
      },
      "execution_count": 61,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     age  trestbps  chol  thalach  oldpeak  target  sex_1   cp_1   cp_2  \\\n",
              "0     52       125   212      168      1.0       0   True  False  False   \n",
              "1     53       140   203      155      3.1       0   True  False  False   \n",
              "2     70       145   174      125      2.6       0   True  False  False   \n",
              "3     61       148   203      161      0.0       0   True  False  False   \n",
              "4     62       138   294      106      1.9       0  False  False  False   \n",
              "..   ...       ...   ...      ...      ...     ...    ...    ...    ...   \n",
              "723   68       120   211      115      1.5       1  False  False   True   \n",
              "733   44       108   141      175      0.6       1  False  False   True   \n",
              "739   52       128   255      161      0.0       0   True  False  False   \n",
              "843   59       160   273      125      0.0       0   True  False  False   \n",
              "878   54       120   188      113      1.4       0   True  False  False   \n",
              "\n",
              "      cp_3  ...  exang_1  slope_1  slope_2   ca_1   ca_2   ca_3   ca_4  \\\n",
              "0    False  ...    False    False     True  False   True  False  False   \n",
              "1    False  ...     True    False    False  False  False  False  False   \n",
              "2    False  ...     True    False    False  False  False  False  False   \n",
              "3    False  ...    False    False     True   True  False  False  False   \n",
              "4    False  ...    False     True    False  False  False   True  False   \n",
              "..     ...  ...      ...      ...      ...    ...    ...    ...    ...   \n",
              "723  False  ...    False     True    False  False  False  False  False   \n",
              "733  False  ...    False     True    False  False  False  False  False   \n",
              "739  False  ...     True    False     True   True  False  False  False   \n",
              "843   True  ...    False    False     True  False  False  False  False   \n",
              "878  False  ...    False     True    False   True  False  False  False   \n",
              "\n",
              "     thal_1  thal_2  thal_3  \n",
              "0     False   False    True  \n",
              "1     False   False    True  \n",
              "2     False   False    True  \n",
              "3     False   False    True  \n",
              "4     False    True   False  \n",
              "..      ...     ...     ...  \n",
              "723   False    True   False  \n",
              "733   False    True   False  \n",
              "739   False   False    True  \n",
              "843   False    True   False  \n",
              "878   False   False    True  \n",
              "\n",
              "[288 rows x 23 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-27202a40-0dc3-4466-980a-2b66de3e60f4\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>trestbps</th>\n",
              "      <th>chol</th>\n",
              "      <th>thalach</th>\n",
              "      <th>oldpeak</th>\n",
              "      <th>target</th>\n",
              "      <th>sex_1</th>\n",
              "      <th>cp_1</th>\n",
              "      <th>cp_2</th>\n",
              "      <th>cp_3</th>\n",
              "      <th>...</th>\n",
              "      <th>exang_1</th>\n",
              "      <th>slope_1</th>\n",
              "      <th>slope_2</th>\n",
              "      <th>ca_1</th>\n",
              "      <th>ca_2</th>\n",
              "      <th>ca_3</th>\n",
              "      <th>ca_4</th>\n",
              "      <th>thal_1</th>\n",
              "      <th>thal_2</th>\n",
              "      <th>thal_3</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>52</td>\n",
              "      <td>125</td>\n",
              "      <td>212</td>\n",
              "      <td>168</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>53</td>\n",
              "      <td>140</td>\n",
              "      <td>203</td>\n",
              "      <td>155</td>\n",
              "      <td>3.1</td>\n",
              "      <td>0</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>...</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>70</td>\n",
              "      <td>145</td>\n",
              "      <td>174</td>\n",
              "      <td>125</td>\n",
              "      <td>2.6</td>\n",
              "      <td>0</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>...</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>61</td>\n",
              "      <td>148</td>\n",
              "      <td>203</td>\n",
              "      <td>161</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>62</td>\n",
              "      <td>138</td>\n",
              "      <td>294</td>\n",
              "      <td>106</td>\n",
              "      <td>1.9</td>\n",
              "      <td>0</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>723</th>\n",
              "      <td>68</td>\n",
              "      <td>120</td>\n",
              "      <td>211</td>\n",
              "      <td>115</td>\n",
              "      <td>1.5</td>\n",
              "      <td>1</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>733</th>\n",
              "      <td>44</td>\n",
              "      <td>108</td>\n",
              "      <td>141</td>\n",
              "      <td>175</td>\n",
              "      <td>0.6</td>\n",
              "      <td>1</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>739</th>\n",
              "      <td>52</td>\n",
              "      <td>128</td>\n",
              "      <td>255</td>\n",
              "      <td>161</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>...</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>843</th>\n",
              "      <td>59</td>\n",
              "      <td>160</td>\n",
              "      <td>273</td>\n",
              "      <td>125</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>878</th>\n",
              "      <td>54</td>\n",
              "      <td>120</td>\n",
              "      <td>188</td>\n",
              "      <td>113</td>\n",
              "      <td>1.4</td>\n",
              "      <td>0</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>288 rows Ã 23 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-27202a40-0dc3-4466-980a-2b66de3e60f4')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-27202a40-0dc3-4466-980a-2b66de3e60f4 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-27202a40-0dc3-4466-980a-2b66de3e60f4');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-f78176db-f610-447c-9b85-0c33219468a9\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f78176db-f610-447c-9b85-0c33219468a9')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-f78176db-f610-447c-9b85-0c33219468a9 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_58311b19-6e03-4183-9791-9b142f71bb79\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('hd4')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_58311b19-6e03-4183-9791-9b142f71bb79 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('hd4');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "hd4"
            }
          },
          "metadata": {},
          "execution_count": 61
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "hd4['chol'].max(), hd4['chol'].min()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "b15WsOoU57EH",
        "outputId": "ee127dcd-38be-4037-b40a-6626419d4909"
      },
      "execution_count": 56,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(353, 126)"
            ]
          },
          "metadata": {},
          "execution_count": 56
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "hd4.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "92TTfY0q6F3G",
        "outputId": "d3e93c75-a316-494c-d9c2-12aea49d6b2f"
      },
      "execution_count": 57,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['age', 'trestbps', 'chol', 'thalach', 'oldpeak', 'target', 'sex_0',\n",
              "       'sex_1', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'fbs_0', 'fbs_1', 'restecg_0',\n",
              "       'restecg_1', 'restecg_2', 'exang_0', 'exang_1', 'slope_0', 'slope_1',\n",
              "       'slope_2', 'ca_0', 'ca_1', 'ca_2', 'ca_3', 'ca_4', 'thal_0', 'thal_1',\n",
              "       'thal_2', 'thal_3'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 57
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X = hd4.drop('target', axis = 1)\n",
        "y = hd4['target']"
      ],
      "metadata": {
        "id": "-4dDg7fA25oh"
      },
      "execution_count": 50,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"
      ],
      "metadata": {
        "id": "tzapaJMv48uW"
      },
      "execution_count": 67,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "scaler = StandardScaler()\n",
        "X_train_scaled = scaler.fit_transform(X_train)\n",
        "X_test_scaled = scaler.transform(X_test)"
      ],
      "metadata": {
        "id": "XHftuNw-_yrd"
      },
      "execution_count": 86,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "log = LogisticRegression( max_iter = 50000)"
      ],
      "metadata": {
        "id": "7LvJY4l_5Bpa"
      },
      "execution_count": 96,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "log.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 75
        },
        "id": "unJtxxUi5KKJ",
        "outputId": "08ad7d5c-cee3-4a88-8308-bc818d39c4f4"
      },
      "execution_count": 97,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LogisticRegression(max_iter=50000)"
            ],
            "text/html": [
              "<style>#sk-container-id-10 {color: black;background-color: white;}#sk-container-id-10 pre{padding: 0;}#sk-container-id-10 div.sk-toggleable {background-color: white;}#sk-container-id-10 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-10 label.sk-toggleable__label-arrow:before {content: \"â¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-10 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-10 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-10 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-10 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-10 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-10 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â¾\";}#sk-container-id-10 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-10 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-10 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-10 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-10 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-10 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-10 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-10 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-10 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-10 div.sk-item {position: relative;z-index: 1;}#sk-container-id-10 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-10 div.sk-item::before, #sk-container-id-10 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-10 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-10 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-10 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-10 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-10 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-10 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-10 div.sk-label-container {text-align: center;}#sk-container-id-10 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-10 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-10\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(max_iter=50000)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-10\" type=\"checkbox\" checked><label for=\"sk-estimator-id-10\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(max_iter=50000)</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 97
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "log.score(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KWzxCW4G5mmw",
        "outputId": "53ec1fd1-4c8a-4699-d1c9-6eaf8acc7c6e"
      },
      "execution_count": 98,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.8739130434782608"
            ]
          },
          "metadata": {},
          "execution_count": 98
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "log.score(X_test, y_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9R8cMuJ4AixS",
        "outputId": "61822a4a-5686-4db6-e633-c245fc53ac93"
      },
      "execution_count": 99,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.8793103448275862"
            ]
          },
          "metadata": {},
          "execution_count": 99
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "####\n",
        "y_previsto = log.predict(X_test)"
      ],
      "metadata": {
        "id": "SaJ8GZONAsdK"
      },
      "execution_count": 100,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "accuracy_score(y_test, y_previsto)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NkItjIlzA6qs",
        "outputId": "313b9e41-5811-4a62-9df9-e787ec386335"
      },
      "execution_count": 101,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.8793103448275862"
            ]
          },
          "metadata": {},
          "execution_count": 101
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(classification_report(y_test, y_previsto))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Cbc2LiW1BL_i",
        "outputId": "e7fca92b-b2c6-4d7a-9bca-0f58f6fc7cc5"
      },
      "execution_count": 102,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.87      0.83      0.85        24\n",
            "           1       0.89      0.91      0.90        34\n",
            "\n",
            "    accuracy                           0.88        58\n",
            "   macro avg       0.88      0.87      0.87        58\n",
            "weighted avg       0.88      0.88      0.88        58\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "confusion_matrix(y_test, y_previsto)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TmEF6n2SBWVy",
        "outputId": "dfb9346e-c9ee-4e57-e0e4-fceb2c40a77c"
      },
      "execution_count": 103,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[20,  4],\n",
              "       [ 3, 31]])"
            ]
          },
          "metadata": {},
          "execution_count": 103
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def relatorio_ml(df, algoritmo, opt=2):\n",
        "    X = df.drop('target', axis=1)\n",
        "    y = df['target']\n",
        "\n",
        "    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "    if opt == 0:\n",
        "        ml = algoritmo(max_iter=50000)\n",
        "    elif opt == 1:\n",
        "        ml = algoritmo(n_estimators=50000)\n",
        "    elif opt == 2:\n",
        "        ml = algoritmo()\n",
        "\n",
        "    ml.fit(X_train, y_train)\n",
        "    score_train = ml.score(X_train, y_train)\n",
        "    print(f\"AcurÃ¡cia treino: {score_train * 100:.2f}%\")\n",
        "    score_test = ml.score(X_test, y_test)\n",
        "    print(f\"AcurÃ¡cia teste: {score_test * 100:.2f}%\")\n",
        "\n",
        "    y_previsto = ml.predict(X_test)\n",
        "    print(\"--- CLASSIFICATION REPORT ---\")\n",
        "    print(classification_report(y_test, y_previsto))\n",
        "    print(\"--- CONFUSION MATRIX ---\")\n",
        "    confusao = confusion_matrix(y_test, y_previsto)\n",
        "    sns.heatmap(confusao, annot=True, cmap='Blues')\n",
        "\n",
        "    return score_train, score_test"
      ],
      "metadata": {
        "id": "ksyR0mvfBtO9"
      },
      "execution_count": 123,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "log_train, log_test = relatorio_ml(hd4, LogisticRegression, opt=0)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 656
        },
        "id": "GoRiDkfuFHnX",
        "outputId": "adc410ed-207f-4153-b83e-4321ac16a53c"
      },
      "execution_count": 158,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "AcurÃ¡cia treino: 86.96%\n",
            "AcurÃ¡cia teste: 87.93%\n",
            "--- CLASSIFICATION REPORT ---\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.87      0.83      0.85        24\n",
            "           1       0.89      0.91      0.90        34\n",
            "\n",
            "    accuracy                           0.88        58\n",
            "   macro avg       0.88      0.87      0.87        58\n",
            "weighted avg       0.88      0.88      0.88        58\n",
            "\n",
            "--- CONFUSION MATRIX ---\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "tree_train, tree_test = relatorio_ml(hd4, DecisionTreeClassifier)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 656
        },
        "id": "oRXRGAx2FmyK",
        "outputId": "030bfb25-a142-4338-983e-8ccab59960e0"
      },
      "execution_count": 159,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "AcurÃ¡cia treino: 100.00%\n",
            "AcurÃ¡cia teste: 72.41%\n",
            "--- CLASSIFICATION REPORT ---\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.63      0.79      0.70        24\n",
            "           1       0.82      0.68      0.74        34\n",
            "\n",
            "    accuracy                           0.72        58\n",
            "   macro avg       0.73      0.73      0.72        58\n",
            "weighted avg       0.74      0.72      0.73        58\n",
            "\n",
            "--- CONFUSION MATRIX ---\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ada_train, ada_test = relatorio_ml(hd4, AdaBoostClassifier)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 656
        },
        "id": "3nVwiu59KvGs",
        "outputId": "d69e821a-6b58-49d4-e32d-8d88e77b4ac9"
      },
      "execution_count": 160,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "AcurÃ¡cia treino: 91.30%\n",
            "AcurÃ¡cia teste: 77.59%\n",
            "--- CLASSIFICATION REPORT ---\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.70      0.79      0.75        24\n",
            "           1       0.84      0.76      0.80        34\n",
            "\n",
            "    accuracy                           0.78        58\n",
            "   macro avg       0.77      0.78      0.77        58\n",
            "weighted avg       0.78      0.78      0.78        58\n",
            "\n",
            "--- CONFUSION MATRIX ---\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "kn_train, kn_test = relatorio_ml(hd4, KNeighborsClassifier)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 661
        },
        "id": "ExJIjsEULQgc",
        "outputId": "8d871880-9efe-462d-b778-d21165450cfa"
      },
      "execution_count": 161,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "AcurÃ¡cia treino: 75.65%\n",
            "AcurÃ¡cia teste: 62.07%\n",
            "--- CLASSIFICATION REPORT ---\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.54      0.58      0.56        24\n",
            "           1       0.69      0.65      0.67        34\n",
            "\n",
            "    accuracy                           0.62        58\n",
            "   macro avg       0.61      0.62      0.61        58\n",
            "weighted avg       0.63      0.62      0.62        58\n",
            "\n",
            "--- CONFUSION MATRIX ---\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "rand_train, rand_test = relatorio_ml(hd4, RandomForestClassifier)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 656
        },
        "id": "i2sPjtJHLg40",
        "outputId": "e1086015-3218-4728-c42c-87c5a7087219"
      },
      "execution_count": 162,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "AcurÃ¡cia treino: 100.00%\n",
            "AcurÃ¡cia teste: 82.76%\n",
            "--- CLASSIFICATION REPORT ---\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.79      0.79      0.79        24\n",
            "           1       0.85      0.85      0.85        34\n",
            "\n",
            "    accuracy                           0.83        58\n",
            "   macro avg       0.82      0.82      0.82        58\n",
            "weighted avg       0.83      0.83      0.83        58\n",
            "\n",
            "--- CONFUSION MATRIX ---\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data = {\n",
        "    'Models': ['Logistic Regression', 'Decision Tree', 'KNeighbors', 'Random Forest Classifier', 'Ada Boost'],\n",
        "    'AcurÃ¡cia Treino': [round(log_train * 100, 2), round(tree_train * 100, 2), round(kn_train * 100, 2), round(rand_train * 100, 2), round(ada_train * 100, 2)],\n",
        "    'AcurÃ¡cia Teste': [round(log_test * 100, 2), round(tree_test * 100, 2), round(kn_test * 100, 2), round(rand_test * 100, 2), round(ada_test * 100, 2)]\n",
        "}\n",
        "\n",
        "df = pd.DataFrame(data)\n",
        "df.sort_values(by='AcurÃ¡cia Teste', ascending=False, inplace=True)\n",
        "df\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "0SpMyCc5L4Zc",
        "outputId": "bc5626da-3e61-4e89-eb18-beeb3321f71b"
      },
      "execution_count": 156,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                     Models  AcurÃ¡cia Treino  AcurÃ¡cia Teste\n",
              "0       Logistic Regression            86.96           87.93\n",
              "3  Random Forest Classifier           100.00           77.59\n",
              "4                 Ada Boost            91.30           77.59\n",
              "1             Decision Tree           100.00           68.97\n",
              "2                KNeighbors            75.65           62.07"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c42d84e3-4ad7-4038-97f2-cb58468a8c9a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Models</th>\n",
              "      <th>AcurÃ¡cia Treino</th>\n",
              "      <th>AcurÃ¡cia Teste</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Logistic Regression</td>\n",
              "      <td>86.96</td>\n",
              "      <td>87.93</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Random Forest Classifier</td>\n",
              "      <td>100.00</td>\n",
              "      <td>77.59</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Ada Boost</td>\n",
              "      <td>91.30</td>\n",
              "      <td>77.59</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Decision Tree</td>\n",
              "      <td>100.00</td>\n",
              "      <td>68.97</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>KNeighbors</td>\n",
              "      <td>75.65</td>\n",
              "      <td>62.07</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c42d84e3-4ad7-4038-97f2-cb58468a8c9a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c42d84e3-4ad7-4038-97f2-cb58468a8c9a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c42d84e3-4ad7-4038-97f2-cb58468a8c9a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-007b801c-fe75-40df-bfd8-45a39f4bae73\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-007b801c-fe75-40df-bfd8-45a39f4bae73')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-007b801c-fe75-40df-bfd8-45a39f4bae73 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_c9db2c16-8da0-4084-90b4-aee5d94531f5\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_c9db2c16-8da0-4084-90b4-aee5d94531f5 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Models\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Random Forest Classifier\",\n          \"KNeighbors\",\n          \"Ada Boost\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Acur\\u00e1cia Treino\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10.17099405171392,\n        \"min\": 75.65,\n        \"max\": 100.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          100.0,\n          75.65,\n          86.96\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Acur\\u00e1cia Teste\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9.797989589706658,\n        \"min\": 62.07,\n        \"max\": 87.93,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          77.59,\n          62.07,\n          87.93\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 156
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def relatorio_ml_scaler(df, algoritmo, opt=2):\n",
        "    X = df.drop('target', axis=1)\n",
        "    y = df['target']\n",
        "\n",
        "    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "    scaler = StandardScaler()\n",
        "    cols_scaler = ['age', 'trestbps', 'chol', 'thalach', 'oldpeak']\n",
        "    X_train[cols_scaler] = scaler.fit_transform(X_train[cols_scaler])\n",
        "    X_test[cols_scaler] = scaler.transform(X_test[cols_scaler])\n",
        "\n",
        "    if opt == 0:\n",
        "        ml = algoritmo(max_iter=50000)\n",
        "    elif opt == 1:\n",
        "        ml = algoritmo(n_estimators=50000)\n",
        "    elif opt == 2:\n",
        "        ml = algoritmo()\n",
        "\n",
        "    ml.fit(X_train, y_train)\n",
        "    score_train = ml.score(X_train, y_train)\n",
        "    print(f\"AcurÃ¡cia treino: {score_train * 100:.2f}%\")\n",
        "    score_test = ml.score(X_test, y_test)\n",
        "    print(f\"AcurÃ¡cia teste: {score_test * 100:.2f}%\")\n",
        "\n",
        "    y_previsto = ml.predict(X_test)\n",
        "    print(\"--- CLASSIFICATION REPORT ---\")\n",
        "    print(classification_report(y_test, y_previsto))\n",
        "    print(\"--- CONFUSION MATRIX ---\")\n",
        "    confusao = confusion_matrix(y_test, y_previsto)\n",
        "    sns.heatmap(confusao, annot=True, cmap='Blues')\n",
        "\n",
        "    return score_train, score_test\n"
      ],
      "metadata": {
        "id": "-h3IU2V5M7cc"
      },
      "execution_count": 149,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "log_train_scaler, log_test_scaler = relatorio_ml_scaler(hd4, LogisticRegression, opt=0)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 656
        },
        "id": "Eqwgh3_PQZr-",
        "outputId": "14e5478a-d297-4f9e-85de-ccdcfb5def48"
      },
      "execution_count": 150,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "AcurÃ¡cia treino: 86.96%\n",
            "AcurÃ¡cia teste: 87.93%\n",
            "--- CLASSIFICATION REPORT ---\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.87      0.83      0.85        24\n",
            "           1       0.89      0.91      0.90        34\n",
            "\n",
            "    accuracy                           0.88        58\n",
            "   macro avg       0.88      0.87      0.87        58\n",
            "weighted avg       0.88      0.88      0.88        58\n",
            "\n",
            "--- CONFUSION MATRIX ---\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "rand_train_scaler, rand_test_scaler = relatorio_ml_scaler(hd4, RandomForestClassifier)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 656
        },
        "id": "ObPVMT6uWBQK",
        "outputId": "7e3c814c-e246-49ab-c9ba-02f810bdfb8b"
      },
      "execution_count": 163,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "AcurÃ¡cia treino: 100.00%\n",
            "AcurÃ¡cia teste: 82.76%\n",
            "--- CLASSIFICATION REPORT ---\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.79      0.79      0.79        24\n",
            "           1       0.85      0.85      0.85        34\n",
            "\n",
            "    accuracy                           0.83        58\n",
            "   macro avg       0.82      0.82      0.82        58\n",
            "weighted avg       0.83      0.83      0.83        58\n",
            "\n",
            "--- CONFUSION MATRIX ---\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "kn_train_scaler, kn_test_scaler = relatorio_ml_scaler(hd4, KNeighborsClassifier)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 656
        },
        "id": "6zFz87JQWIoW",
        "outputId": "85dcd027-121d-4e00-ea59-97a3e065bf22"
      },
      "execution_count": 164,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "AcurÃ¡cia treino: 86.09%\n",
            "AcurÃ¡cia teste: 77.59%\n",
            "--- CLASSIFICATION REPORT ---\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.72      0.75      0.73        24\n",
            "           1       0.82      0.79      0.81        34\n",
            "\n",
            "    accuracy                           0.78        58\n",
            "   macro avg       0.77      0.77      0.77        58\n",
            "weighted avg       0.78      0.78      0.78        58\n",
            "\n",
            "--- CONFUSION MATRIX ---\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ada_train_scaler, ada_test_scaler = relatorio_ml_scaler(hd4, AdaBoostClassifier)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 656
        },
        "id": "yW8BTAxcWMBn",
        "outputId": "07828eb1-0d10-467a-d2a1-c0b19f08beda"
      },
      "execution_count": 165,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "AcurÃ¡cia treino: 91.30%\n",
            "AcurÃ¡cia teste: 77.59%\n",
            "--- CLASSIFICATION REPORT ---\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.70      0.79      0.75        24\n",
            "           1       0.84      0.76      0.80        34\n",
            "\n",
            "    accuracy                           0.78        58\n",
            "   macro avg       0.77      0.78      0.77        58\n",
            "weighted avg       0.78      0.78      0.78        58\n",
            "\n",
            "--- CONFUSION MATRIX ---\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "tree_train_scaler, tree_test_scaler = relatorio_ml_scaler(hd4, DecisionTreeClassifier)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 661
        },
        "id": "IjSArtjBWPP_",
        "outputId": "51b210ad-ca1f-4ae3-9378-f9644f3563d7"
      },
      "execution_count": 166,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "AcurÃ¡cia treino: 100.00%\n",
            "AcurÃ¡cia teste: 79.31%\n",
            "--- CLASSIFICATION REPORT ---\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.70      0.88      0.78        24\n",
            "           1       0.89      0.74      0.81        34\n",
            "\n",
            "    accuracy                           0.79        58\n",
            "   macro avg       0.80      0.81      0.79        58\n",
            "weighted avg       0.81      0.79      0.79        58\n",
            "\n",
            "--- CONFUSION MATRIX ---\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data_scaler = {\n",
        "    'Models': ['Logistic Regression', 'Decision Tree', 'KNeighbors', 'Random Forest Classifier', 'Ada Boost'],\n",
        "    'AcurÃ¡cia Treino': [round(log_train_scaler * 100, 2), round(tree_train_scaler * 100, 2), round(kn_train_scaler * 100, 2), round(rand_train_scaler * 100, 2), round(ada_train_scaler * 100, 2)],\n",
        "    'AcurÃ¡cia Teste': [round(log_test_scaler * 100, 2), round(tree_test_scaler * 100, 2), round(kn_test_scaler * 100, 2), round(rand_test_scaler * 100, 2), round(ada_test_scaler * 100, 2)]\n",
        "}\n",
        "\n",
        "df_scaler = pd.DataFrame(data_scaler)\n",
        "df_scaler.sort_values(by='AcurÃ¡cia Teste', ascending=False, inplace=True)\n",
        "df_scaler"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "82yDWaDFQp8t",
        "outputId": "ac4fff1d-828f-44ac-8eb5-c59e94bad56b"
      },
      "execution_count": 167,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                     Models  AcurÃ¡cia Treino  AcurÃ¡cia Teste\n",
              "0       Logistic Regression            86.96           87.93\n",
              "3  Random Forest Classifier           100.00           82.76\n",
              "1             Decision Tree           100.00           79.31\n",
              "2                KNeighbors            86.09           77.59\n",
              "4                 Ada Boost            91.30           77.59"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-29575365-6f36-4579-9179-3cc631616e24\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Models</th>\n",
              "      <th>AcurÃ¡cia Treino</th>\n",
              "      <th>AcurÃ¡cia Teste</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Logistic Regression</td>\n",
              "      <td>86.96</td>\n",
              "      <td>87.93</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Random Forest Classifier</td>\n",
              "      <td>100.00</td>\n",
              "      <td>82.76</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Decision Tree</td>\n",
              "      <td>100.00</td>\n",
              "      <td>79.31</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>KNeighbors</td>\n",
              "      <td>86.09</td>\n",
              "      <td>77.59</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Ada Boost</td>\n",
              "      <td>91.30</td>\n",
              "      <td>77.59</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-29575365-6f36-4579-9179-3cc631616e24')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-29575365-6f36-4579-9179-3cc631616e24 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-29575365-6f36-4579-9179-3cc631616e24');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-1060094b-b4cd-41b4-992f-5ff7f8291949\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1060094b-b4cd-41b4-992f-5ff7f8291949')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-1060094b-b4cd-41b4-992f-5ff7f8291949 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_9ceccd1f-32bc-4036-a2a8-a78944af23fd\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_scaler')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_9ceccd1f-32bc-4036-a2a8-a78944af23fd button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df_scaler');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_scaler",
              "summary": "{\n  \"name\": \"df_scaler\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Models\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Random Forest Classifier\",\n          \"Ada Boost\",\n          \"Decision Tree\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Acur\\u00e1cia Treino\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.801382212462405,\n        \"min\": 86.09,\n        \"max\": 100.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          100.0,\n          91.3,\n          86.96\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Acur\\u00e1cia Teste\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.393982248484854,\n        \"min\": 77.59,\n        \"max\": 87.93,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          82.76,\n          77.59,\n          87.93\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 167
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "YWwx5dNnSUOt",
        "outputId": "eb57a65e-8f56-4da5-a6f9-636e1668edb9"
      },
      "execution_count": 168,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                     Models  AcurÃ¡cia Treino  AcurÃ¡cia Teste\n",
              "0       Logistic Regression            86.96           87.93\n",
              "3  Random Forest Classifier           100.00           77.59\n",
              "4                 Ada Boost            91.30           77.59\n",
              "1             Decision Tree           100.00           68.97\n",
              "2                KNeighbors            75.65           62.07"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-75c996cb-c1bf-4e6d-b750-81ca04283ca8\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Models</th>\n",
              "      <th>AcurÃ¡cia Treino</th>\n",
              "      <th>AcurÃ¡cia Teste</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Logistic Regression</td>\n",
              "      <td>86.96</td>\n",
              "      <td>87.93</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Random Forest Classifier</td>\n",
              "      <td>100.00</td>\n",
              "      <td>77.59</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Ada Boost</td>\n",
              "      <td>91.30</td>\n",
              "      <td>77.59</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Decision Tree</td>\n",
              "      <td>100.00</td>\n",
              "      <td>68.97</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>KNeighbors</td>\n",
              "      <td>75.65</td>\n",
              "      <td>62.07</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-75c996cb-c1bf-4e6d-b750-81ca04283ca8')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-75c996cb-c1bf-4e6d-b750-81ca04283ca8 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-75c996cb-c1bf-4e6d-b750-81ca04283ca8');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-e3d129dd-d21c-4dce-9d6e-ab168130dcda\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e3d129dd-d21c-4dce-9d6e-ab168130dcda')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-e3d129dd-d21c-4dce-9d6e-ab168130dcda button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_c6056f2b-850c-4cef-bc70-4d2c210aa144\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_c6056f2b-850c-4cef-bc70-4d2c210aa144 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Models\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Random Forest Classifier\",\n          \"KNeighbors\",\n          \"Ada Boost\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Acur\\u00e1cia Treino\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10.17099405171392,\n        \"min\": 75.65,\n        \"max\": 100.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          100.0,\n          75.65,\n          86.96\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Acur\\u00e1cia Teste\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9.797989589706658,\n        \"min\": 62.07,\n        \"max\": 87.93,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          77.59,\n          62.07,\n          87.93\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 168
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "tk3fkWFWWTFW"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}